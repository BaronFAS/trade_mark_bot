import os
import logging
import re
import sys
import telegram
import requests
from http import HTTPStatus
from typing import List
from dotenv import load_dotenv
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters,
                          CallbackQueryHandler)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
API_ENDPOINT = os.getenv('API_ENDPOINT')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
HEADERS = {
    "Content-Type": f"{os.getenv('CONTENT_TYPE')}",
    "X-Requested-With": f"{os.getenv('X_REQUESTED_WITH')}",
    "Authorization": f"{os.getenv('AUTHORIZATION')}"
}
MESSAGES = {
    'start': '–ü—Ä–∏–≤–µ—Ç, —è @search_trade_mark_bot üöÄ',
    'new_search': 'üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
    'help': '–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –í–æ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
    '–∫–∞–∫ –¥–µ–ª–∞?': '–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –ê —É –≤–∞—Å?',
    'wrong_input': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É help.'
}
BUTTONS = {
    'start': '–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É'
}
RESULTS_CHECK = {
    'High': '–≤—ã—Å–æ–∫–∞—è',
    'Low': '–Ω–∏–∑–∫–∞—è'
}
# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.DEBUG,
    filename='main_log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8',
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(funcName)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telegram.Bot(token=TELEGRAM_TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
def start(update, context):
    keyboard = [[InlineKeyboardButton(
        BUTTONS['start'],
        callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=MESSAGES['start'],
        reply_markup=reply_markup
    )


def send_request_to_api_web(input_data: str) -> List[str]:
    """–ü–æ—Å—ã–ª–∞–µ—Ç –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç api."""
    data = "type=generate&data[queryText]="+input_data+"&sync=true"
    try:
        response = requests.post(
            url=API_ENDPOINT,
            headers=HEADERS,
            data=data.encode('utf-8'))
        logger.debug(f'–ö API –ì–∞—Ä–¥–∏—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å: {input_data}.')

    except Exception as error:
        error_text = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {error}.'
        logger.error(error_text)
        raise ValueError(error_text)

    finally:
        logger.info('–§—É–Ω–∫—Ü–∏—è send_request_to_api_web –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    if response.status_code != HTTPStatus.OK:
        error_text = (
            '–û—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ '
            f'–ì–∞—Ä–¥–∏—É–º: {response.status_code}'
        )
        logger.error(error_text)
        raise ValueError(error_text)

    logger.debug(f'–û—Ç API –ì–∞—Ä–¥–∏—É–º –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.json()}.')
    # print(response.json())
    return response.json()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_message(update, context):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text = update.message.text.lower()
    logger.debug(f'–û—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}.')
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    if message_text in MESSAGES:
        response_text = MESSAGES[message_text]

    elif (message_text not in MESSAGES and
          re.match(r'[\w\d_\-=.]{1,30}', message_text)):
        logger.debug(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.')
        raw_response = send_request_to_api_web(message_text)
        complexity = RESULTS_CHECK[raw_response['resultCheck']]
        url_report = raw_response['urlCheck']
        logger.debug(
            f'–í—ã—á–∏—Å–ª–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {complexity}.')
        logger.debug(
            f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {url_report}.')

        response_text = (
            f'–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {complexity}. '
            f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {url_report}')

    else:
        response_text = MESSAGES['wrong_input']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=response_text)


def button(update, context):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text=('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.'
              '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.')
    )


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
def send_start_button(context):
    keyboard = [[InlineKeyboardButton(
        BUTTONS['start'],
        callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(
        chat_id=TELEGRAM_CHAT_ID,
        text=MESSAGES['start'],
        reply_markup=reply_markup
    )


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Updater –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
dispatcher = updater.dispatcher
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
dispatcher.add_handler(CommandHandler('start', start))
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dispatcher.add_handler(MessageHandler(
    Filters.text & ~Filters.command, handle_message))
dispatcher.run_async(send_start_button, context=updater)
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏
dispatcher.add_handler(CallbackQueryHandler(button))

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
updater.start_polling()
