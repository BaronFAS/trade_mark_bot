import os
import sys
import logging
import telegram
import requests
import re

from typing import List, Dict, Union
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from dotenv import load_dotenv
from http import HTTPStatus


load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_ENDPOINT = os.getenv("API_ENDPOINT")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
HEADERS = {
    "Content-Type": f"{os.getenv('CONTENT_TYPE')}",
    "X-Requested-With": f"{os.getenv('X_REQUESTED_WITH')}",
    "Authorization": f"{os.getenv('AUTHORIZATION')}",
}
TM_NAME = None
"""–•—Ä–∞–Ω–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
# –ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–∫–æ–º –∏ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫?
MESSAGES = {
    "start": "–ü—Ä–∏–≤–µ—Ç, —è @search_trade_mark_bot üöÄ\n\nüîé –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±–∞–∑–µ –†–æ—Å–ø–∞—Ç–µ–Ω—Ç–∞",
    "new_search": "üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
    "check_title_1": "–ü—Ä–∏–Ω—è–ª üëå –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–∑–≤–∞–Ω–∏–µ: ",
    "check_title_2": "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –†–æ—Å–ø–∞—Ç–µ–Ω—Ç–∞.\n–í —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã –ø—Ä–∏—à–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.",
}
TECH_MESSAGES = {
    "help": "–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –í–æ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
    "–∫–∞–∫ –¥–µ–ª–∞?": "–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –ê —É –≤–∞—Å?",
    "wrong_input": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É help.",
    "tm_name_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π",
    "api_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ"
}
BOT = telegram.Bot(token=TELEGRAM_TOKEN)
"""–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞."""

logging.basicConfig(
    level=logging.DEBUG,
    filename="log_bot",
    filemode="w",
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8",
)
"""–õ–æ–≥–∏—Ä—É–µ–º –±–æ—Ç–∞."""
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter(
    "%(asctime)s - %(levelname)s - %(funcName)s - %(message)s"
)
handler.setFormatter(formatter)
logger.addHandler(handler)


def check_response(response: Dict[str, Union[int, str, bool]]) -> bool:
    if not response["id"].isdigit():
        logger.warning("–û—à–∏–±–∫–∞ API, ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int")
        return
    # –ü–†–û–î–û–õ–ñ–ò–¢–¨


def create_answer(response: List[str]) -> str:
    pass


def check_message(input_data: str) -> bool:
    if re.fullmatch(r'^[\w\d_\-=.,]{1,100}$', input_data):
        logger.debug("–ó–∞–ø—Ä–æ—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
        return True
    return False


def send_request_to_api_web(input_data: str) -> List[str]:
    """–ü–æ—Å—ã–ª–∞–µ—Ç –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç api."""
    data = "type=generate&data[queryText]=" + input_data + "&sync=true"
    try:
        response = requests.post(
            url=API_ENDPOINT, headers=HEADERS, data=data.encode("utf-8")
        )
        logger.debug(f"–ö API –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å: {input_data}.")

    except Exception as error:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {error}."
        logger.error(error_text)
        raise ValueError(error_text)

    finally:
        logger.info("–§—É–Ω–∫—Ü–∏—è send_request_to_api_web –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    if response.status_code != HTTPStatus.OK:
        error_text = f"–û—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {response.status_code}"
        logger.error(error_text)
        raise ValueError(error_text)

    logger.debug(f"–û—Ç API –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.json()}.")
    return response.json()


def start(update, context):
    """–û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    update.message.reply_text(MESSAGES["start"])
    update.message.reply_text(MESSAGES["new_search"])
    logger.debug("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


def get_message(update, context):
    """–û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è."""
    global TM_NAME
    TM_NAME = update.message.text
    if check_message(TM_NAME):
        update.message.reply_text(
            MESSAGES["check_title_1"] + TM_NAME + "\n" + MESSAGES["check_title_2"]
        )
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ: {TM_NAME} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        update.message.reply_text(TECH_MESSAGES["tm_name_error"])
        logger.debug(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {TM_NAME} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    response = send_request_to_api_web(TM_NAME)
    if check_response(response):
        answer_text = create_answer(response)
        update.message.reply_text(answer_text)
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        update.message.reply_text(TECH_MESSAGES["api_error"])
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")


def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    """–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞."""
    dispatcher = updater.dispatcher
    """–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    dispatcher.add_handler(CommandHandler("start", start))
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    dispatcher.add_handler(
        MessageHandler(Filters.text & ~Filters.command, get_message)
    )
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –°—é–¥–∞ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—á–∏–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –∞—É–¥–∏–æ, —á—Ç–æ –±—ã —É–ø—Ä–æ—Å–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é.
    updater.start_polling()
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞."""


if __name__ == "__main__":
    main()
