import logging
import os
import telegram
import sys
import requests
from http import HTTPStatus
from typing import List  # Dict
from dotenv import load_dotenv
from pprint import pprint
from time import sleep
from telegram.error import NetworkError, Unauthorized

load_dotenv()

API_ENDPOINT = os.getenv('API_ENDPOINT')
UPDATE_ID = None
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
# TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

MESSAGE = {
    'start': '–ü—Ä–∏–≤–µ—Ç, —è @gardium_tm_bot.',
    'new_search': 'üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
}


HEADERS = {
    "Content-Type": f"{os.getenv('CONTENT_TYPE')}",
    "X-Requested-With": f"{os.getenv('X_REQUESTED_WITH')}",
    "Authorization": f"{os.getenv('AUTHORIZATION')}"
}

logging.basicConfig(
    level=logging.DEBUG,
    filename='main_log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8',
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(funcName)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)


def init_logger() -> None:
    """–õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç."""
    pass


def check_tokens() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    """
    pass


def read_input(s) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    input_data = s
    return input_data


def send_request_to_api_web(message: str) -> List[str]:
    """–ü–æ—Å—ã–ª–∞–µ—Ç –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç api."""
    input_data = message
    data = "type=generate&data[queryText]="+input_data+"&sync=true"
    try:
        response = requests.post(
            url=API_ENDPOINT,
            headers=HEADERS,
            data=data.encode('utf-8'))
        logger.debug(f'–ö API –ì–∞—Ä–¥–∏—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å: {input_data}.')

    except Exception as error:
        error_text = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {error}.'
        logger.error(error_text)
        raise ValueError(error_text)

    finally:
        logger.info('–§—É–Ω–∫—Ü–∏—è send_request_to_api_web –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    if response.status_code != HTTPStatus.OK:
        error_text = (
            '–û—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ '
            f'–ì–∞—Ä–¥–∏—É–º: {response.status_code}'
        )
        logger.error(error_text)
        raise ValueError(error_text)

    logger.debug(f'–û—Ç API –ì–∞—Ä–¥–∏—É–º –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.json()}.')
    print(response.json())
    # return response.json()
    pprint(response.json())


def check_result_search_tm():  # -> Dict[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö."""
    pass


def incoming_message() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    pass


def send_message(bot: telegram.bot.Bot, message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    global UPDATE_ID

    for update in bot.get_updates(offset=UPDATE_ID, timeout=10):
        UPDATE_ID = update.update_id + 1
        if update.message:
            # –Ω–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
            if update.message.text:
                # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                update.message.reply_text(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}')
                update.message.reply_text(f'–ë–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç: {message}')
                send_request_to_api_web(update.message.text)


def send_data_to_webhook_crm() -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CRM."""
    pass


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    global UPDATE_ID
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    try:
        UPDATE_ID = bot.get_updates()[0].update_id
    except IndexError:
        UPDATE_ID = None
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    while True:
        sleep(1)
        try:
            send_message(bot, MESSAGE['start'])
        except NetworkError:
            # –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
            sleep(5)
        except Unauthorized:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.
            UPDATE_ID += 1


if __name__ == '__main__':
    # send_request_to_api_web()
    main()
